#
# Build
#

set build_components {
	core init
	drivers/rtc
	drivers/timer
	drivers/audio
	drivers/framebuffer drivers/input
	app/risc5-emu
}

source ${genode_dir}/repos/base/run/platform_drv.inc
# override default platform driver policy
proc platform_drv_policy {} {
	return {
			<policy label_prefix="ps2_drv"> <device name="PS2"/> </policy>
			<policy label_prefix="usb_drv"> <pci class="USB"/> </policy>
			<policy label_prefix="fb_drv">  <pci class="VGA"/> </policy>
			<policy label_prefix="audio_drv"> <pci class="AUDIO"/> <pci class="HDAUDIO"/> </policy>}
}

append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>}

append_if [have_spec sdl] config {
	<start name="fb_sdl" ld="no">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
		<config width="1280" height="1024"/>
	</start>}

append_platform_drv_config

append_if [have_spec vesa] config {
	<start name="fb_drv" caps="200">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
		<config buffered="yes" width="1280" height="1024"> </config>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start>}

append config {
	<start name="rtc_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Rtc"/> </provides>
	</start>
	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes"/>
	</start>
	<start name="audio_drv">
		<binary name="} [audio_drv_binary] {"/>
		<resource name="RAM" quantum="6M"/>
		<provides><service name="Audio_out"/></provides>
	</start>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="risc5-emu" caps="200">
		<resource name="RAM" quantum="728M"/>
		<config>
			<arg value="risc5-emu" />
			<arg value="Oberon-2016-08-02.dsk" />
			<sdl_audio_volume value="100"/>
			<libc stdout="/dev/log" stderr="/dev/log"/>
				<vfs>
					<rom name="Oberon-2016-08-02.dsk"/>
					<dir name="dev"> <log/> </dir>
				</vfs>
		</config>
        <route>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
</config>}

install_config $config

if {![file exists bin/Oberon-2016-08-02.dsk]} {
	puts ""
	puts "You need to provide 'Oberon-2016-08-02.dsk' that contains the Oberon Disk Image"
	puts ""
	exit 1
}

#
# Boot modules
#

# generic modules
append boot_modules {
	core init timer rtc_drv report_rom } [audio_drv_binary] {
	ld.lib.so
	libc.lib.so vfs.lib.so
	libm.lib.so
	sdl.lib.so
	risc5-emu Oberon-2016-08-02.dsk
}

# platform-specific modules
lappend_if [have_spec linux] boot_modules fb_sdl
lappend_if [have_spec vesa]  boot_modules fb_drv
lappend_if [have_spec ps2]   boot_modules ps2_drv
lappend_if [have_spec pl11x] boot_modules fb_drv

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args "  -soundhw es1370 -m 1024"

run_genode_until forever
